# Use Node LTS Alpine for minimal image size
FROM node:20-alpine AS base

# Install dependencies only when needed
FROM base AS deps
# Check https://github.com/nodejs/docker-node/tree/b4117f9333da4138b03a546ec926ef50a31506c3#nodealpine to understand why libc6-compat might be needed.
RUN apk add --no-cache libc6-compat postgresql-client wget
WORKDIR /app

# Copy package files for better layer caching
COPY package.json pnpm-lock.yaml ./
RUN \
  if [ -f pnpm-lock.yaml ]; then corepack enable pnpm && pnpm i --frozen-lockfile; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Development image with database setup and seeding
FROM base AS runner
WORKDIR /app

# Install runtime dependencies including postgresql-client for database operations
RUN apk add --no-cache postgresql-client wget

# Create non-root user for security
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 nextjs

# Copy package files and dependencies
COPY --from=deps /app/node_modules ./node_modules
COPY --from=deps /app/package.json ./
COPY --from=deps /app/pnpm-lock.yaml ./
COPY . .

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 3000

# Set environment variables
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"
ENV NODE_ENV=development
ENV NEXT_TELEMETRY_DISABLED 1

# Add a script to wait for postgres and run database setup
RUN echo '#!/bin/sh\necho "Waiting for PostgreSQL to be ready..."\nuntil pg_isready -h postgres -p 5432 -U user; do\necho "PostgreSQL is not ready yet. Waiting..."\nsleep 2\ndone\necho "PostgreSQL is ready! Running database setup..."\npnpm run db:push\npnpm run seed\necho "Database setup completed! Starting dev server..."\nexec pnpm run dev' > /tmp/setup-dev.sh && chmod +x /tmp/setup-dev.sh

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:3000/api/health || exit 1

# Run database setup script then start the dev server
CMD ["/tmp/setup-dev.sh"]
